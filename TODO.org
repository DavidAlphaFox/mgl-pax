#+STARTUP: overview
#+SEQ_TODO: TODO(t@) NEXT(n@) STARTED(s@) WAITING(w@) | DONE(d@) OLD(o@) CANCELLED(c@)
#+TODO: MAYBE(m@) FAILED(f@) LOG(l@) DEFERRED(e@) BUG(b@)
* OPT parse and print markdown once when *format* is :html?
This would involve rewriting everything to emit parse tree fragments or be able to produce html directly. Either way, it is not without cost.
* defining link ids doesn't work in function docstrings
because it's translated to a list item

(3BMD:PARSE-STRING-AND-PRINT-TO-STREAM "
- xxx

    [link][aaaa]
    
    [aaaa]: https://example.com

" *standard-output* :FORMAT :HTML)

But there is no good place to define them, so we'll need something
like a symbol based definition:

(defmdtarget markdown "http://exxx")

which is maybe an external link.
* MAYBE pretty print lambda-lists (including default values)
and values of variables. Unfortunately, there seems to be no way to
use the lisp pretty printer for this because output also includes
markup. We could get the original indentation from the sources.
* MAYBE transcribe: emacs retranscribe should not update if consistent?
This either relies on the global value of
*TRANSCRIBE-CHECK-CONSISTENCY* or it needs to see the
"```cl-transcript (...)" line.
* TODO support external links
This is partially done. CLHS is mostly implemented as an external
link. See EXTERNAL-LOCATIVE-P and co.
* MAYBE link to MOP
* MAYBE consider CommonDoc from the 40ants fork
* MAYBE remove some markup in :PLAIN format?
* MAYBE get variable initforms from source?
Or fall back on this for deficient ARGLISTs. Will be really slow.
* MAYBE document glossary-term class and slots?
* MAYBE add format control character locative?
* MAYBE add loop keyword locative?
* MAYBE move towards literate programming
** MAYBE todo/comment locative?
** add SYMBOL as an alias for dislocated?
** add source locative
That is, link to github, without documenting anything. Useful for code
examples without actually INCLUDEing them.
** reorder source definitions
** autoinclude docstrings
(with-implementation
  (defvar *document-uppercase-is-code* t
    "First line.")
  (defun foo ()
    "Second line.")
  "3rd line with narrative"
  (defvar saf
    "more"))

expands to

(defvar *document-uppercase-is-code* t
  "First line"
  "[foo function][docstring]"
  "3rd line with narrative"
  "more")

(defun foo ()
  "Second line.")

(defvar saf
  "more")
** local functions?
** named one-off local functions?
(defun foo (x)
  ;; Just for the name, really. Maybe control what it can close over?
  (subfoo ()
   ))
* MAYBE add list of dependencies to ASDF system doc
https://github.com/40ants/doc/commit/c3bf89fa88ab70074466aa07358caad159d45008
* BUG (low) method dspec parsing is incorrect
e.g. SB-PCL::MAKE-SPECIALIZER-FORM-USING-CLASS One cannot tell method
qualifiers from specializers in the dspec without actually consulting
the definition.
* MAYBE use SECTION-PACKAGE from "first" enclosing section?
That is, when generating documentation for something that's referenced
by one or more sections. See PAX::SECTIONS-THAT-CONTAIN and
PAX::SORT-BY-PROXIMITY.
* BUG (low) (3BMD-GRAMMAR:PARSE-DOC "[l][*x*]") fails
https://github.com/3b/3bmd/issues/55
* MAYBE autoload documentation when needed?
E.g. for named-readtables, which has its docs in named-readtables/doc.
* BUG (low) C-. history depends on current package
E.g. 'clhs' works in a package where pax used but not elsewhere.

But so does M-.'s history.
* OPT 3bmd parsing performance on large blocks
https://github.com/3b/3bmd/issues/56
* MAYBE heuristically detect code blocks?
C-. on ALEXANDRIA:DESTRUCTURING-CASE
* MAYBE when exported by pax, we know the exact definition being exported
Package apropos could take advantage?
* MAYBE mgl-pax-apropos should defer to slime-apropos if pax not loaded?
* MAYBE add TAB completion to M-. prompt
* MAYBE add SPECIAL locative and make variable an alias of it?
* MAYBE support DECLARATION docstrings?
* MAYBE support setf docstring?
* MAYBE better SOURCE addressing for INCLUDE
* MAYBE live browsing: reload page automatically on redefinition
* transcribe: how to include errors without failing?
* BUG on @LOCATIVE-TYPEs M-. goes to @LOCATIVE-TYPES
but DOCUMENT doesn't.
* BUG M-. in comments with ; chars in the way of parsing
* BUG disambiguation page escaping of NAME (e.g. *print-length*)
* compare DREF to the DEFINITIONS library
Cons of DEFINITIONS:
- Assumes that designators are SYMBOLs or (SETF <SYMBOL>).
- Shadows cl:symbol, cl:package, cl:class, ... (can't be :USEd without
  hassle?)
- Has no equivalent to LOCATEing a single definition ((LOCATE 'XXX
  'VARIABLE))?
- only 3 lisps are supported
- no tests
- very little documentation

Pros of DEFINITIONs:
- BIND, (SETF OBJECT), UNBIND, (SETF DOCUMENTATION).
* BUG M-. on pax:docstring pax:locative>
