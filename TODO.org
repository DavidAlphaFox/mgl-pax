#+SEQ_TODO: TODO(t@) NEXT(n@) STARTED(s@) WAITING(w@) | DONE(d@) OLD(o@) CANCELLED(c@)
#+TODO: MAYBE(m@) FAILED(f@) LOG(l@) DEFERRED(e@) BUG(b@)
* MAYBE add locatives for sbcl internals
deftransform, defoptimizer, define-vop, define-source-transfrom
* OPT esrap is slow with allegro cl
* OPT parse and print markdown once when *format* is :html?
This would involve rewriting everything to emit parse tree fragments or be able to produce html directly. Either way, it is not without cost.
* defining link ids doesn't work in function docstrings
because it's translated to a list item

(3BMD:PARSE-STRING-AND-PRINT-TO-STREAM "
- xxx

    [link][aaaa]
    
    [aaaa]: https://example.com

" *standard-output* :FORMAT :HTML)
* MAYBE pretty print lambda-lists (including default values)
and values of variables. Unfortunately, there seems to be no way to
use the lisp pretty printer for this because output also includes
markup. We could get the original indentation from the sources.
* MAYBE transcribe: emacs retranscribe should not update if consistent?
This either relies on the global value of
*TRANSCRIBE-CHECK-CONSISTENCY* or it needs to see the
"```cl-transcript (...)" line.
* MAYBE support external links
There are two kinds:
- object is text (like the CLHS locative)
- normal references with external urls (hyperspec symbol lookup)

The first kind is needs no additional support from pax as markdown
reference links or user defined locatives can take care of this case.

The second kind is very easy to implement: it only needs a small
change in INITIALIZE-LINKS.
* MAYBE link to MOP
* MAYBE consider CommonDoc from the 40ants fork
* MAYBE split transcription off into a separate library?
* MAYBE remove some markup in :PLAIN format?
* MAYBE desuffix all lowercase suffixes?
e.g. RESOLVEd
* MAYBE get variable initforms from source?
Or fall back on this for deficient ARGLISTs. Will be really slow.
* test navigation from the emacs side
* MAYBE document glossary-term class and slots?
* MAYBE support linking to hyperspec glossary entries?
* move towards literate programming
** MAYBE todo/comment locative?
** add SYMBOL as an alias for dislocated?
** add source locative
That is, link to github, without documenting anything. Useful for code
examples without actually INCLUDEing them.
** reorder source definitions
** autoinclude docstrings
(with-implementation
  (defvar *document-uppercase-is-code* t
    "First line.")
  (defun foo ()
    "Second line.")
  "3rd line with narrative"
  (defvar saf
    "more"))

expands to

(defvar *document-uppercase-is-code* t
  "First line"
  "[foo function][docstring]"
  "3rd line with narrative"
  "more")

(defun foo ()
  "Second line.")

(defvar saf
  "more")
** local functions?
** named one-off local functions?
(defun foo (x)
  ;; Just for the name, really. Maybe control what it can close over?
  (subfoo ()
   ))
* MAYBE add list of dependencies to ASDF system doc
https://github.com/40ants/doc/commit/c3bf89fa88ab70074466aa07358caad159d45008
* MAYBE autodoc?
https://github.com/40ants/doc/commit/d638135b784c2fd7e0199c829157644da197fdb7
* BUG "FUNCTION locative" docstring processed in wrong package
Because the actual definition is in (SYMBOL-PACKAGE 'FUNCTION).
* BUG class/type/condition confusion 
* TODO support local functions, macros OTHERWISE, CALL-NEXT-METHOD
* TODO support symbols in a context
E.g. LOOP's WITH, or OTHERWISE in CASE.
