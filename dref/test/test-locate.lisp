(in-package :dref-test)

(deftest test-locate ()
  (test-locate/make-xref)
  (test-locate/undefined)
  (test-locate/variable)
  (test-locate/constant)
  (test-locate/macro)
  (test-locate/compiler-macro)
  (test-locate/symbol-macro)
  (test-locate/setf)
  (test-locate/function)
  (test-locate/generic-function)
  (test-locate/method)
  (test-locate/method-combination)
  (test-locate/accessor)
  (test-locate/reader)
  (test-locate/writer)
  (test-locate/structure-accessor)
  (test-locate/type)
  (test-locate/class)
  (test-locate/condition)
  (test-locate/declaration)
  (test-locate/restart)
  (test-locate/asdf-system)
  (test-locate/package)
  (test-locate/readtable)
  (test-locate/locative)
  (test-locate/unknown)
  (test-locate/lambda)
  (test-locate/alias))

(defun check-ref (reference name locative &optional type)
  (is (and (% reference)
           (equal (xref-name reference) name)
           (equal (xref-locative reference) locative)
           (when type
             (typep reference type)))))

(deftest test-locate/make-xref ()
  (check-ref (locate (make-xref '*package* 'variable))
             '*package* 'variable 'variable-dref))

(deftest test-locate/undefined ()
  (signals (locate-error)
    (locate :xxx))
  (signals (locate-error)
    (locate (make-xref '*package* 'undefined))))

(deftest test-locate/variable ()
  (check-ref (locate '*package* 'variable)
             '*package* 'variable 'variable-dref)
  (check-ref (locate '*package* '(variable 7))
             '*package* 'variable 'variable-dref)
  (check-ref (dref-origin (locate '*package* '(variable 7)))
             '*package* '(variable 7) 'xref)
  (signals (locate-error :pred "Bad argument")
    (locate '*package* '(variable 7 8)))
  (with-failure-expected ((and (alexandria:featurep '(:not :sbcl))
                               'failure))
    (with-test ("How to detect specials?")
      (signals (locate-error)
        (locate '*non-existent* 'variable)))))

(deftest test-locate/constant ()
  (check-ref (locate 'bar 'constant)
             'bar 'constant 'constant-dref)
  (check-ref (locate 'bar '(constant 7))
             'bar 'constant 'constant-dref)
  (check-ref (dref-origin (locate 'bar '(constant 7)))
             'bar '(constant 7) 'xref)
  (check-ref (locate 'bar 'variable)
             'bar 'constant 'constant-dref)
  (check-ref (locate 'bar '(variable 7))
             'bar 'constant 'constant-dref)
  (check-ref (dref-origin (locate 'bar '(variable 7)))
             'bar '(constant 7) 'xref)
  (signals (locate-error :pred "that's CONSTANTP")
    (locate '*package* 'constant))
  (signals (locate-error :pred "Bad arguments")
    (locate 'bar '(constant 7 8)))
  (signals (locate-error)
    (locate :xxx 'constant))
  (signals (locate-error)
    (locate '*print-length* 'constant)))

(deftest test-locate/macro ()
  (check-ref (locate 'bar 'macro)
             'bar 'macro 'macro-dref)
  (with-failure-expected ((and (alexandria:featurep '(:not :sbcl))
                               'failure))
    (with-test ("How to detect macro functions?")
      (signals-not (locate-error :pred "The name")
        (check-ref (locate (macro-function 'bar))
                   'bar 'macro 'macro-dref))))
  (signals (locate-error :pred "does not name")
    (locate 'foo 'macro))
  (signals (locate-error :pred "Bad arguments")
    (locate 'bar '(macro 7)))
  (let ((ref (make-xref 'setfed-macro 'macro)))
    (is (xref= (locate ref) ref)))
  (signals (resolve-error)
    (resolve (dref:make-xref 'function 'macro))))

(deftest test-locate/symbol-macro ()
  (check-ref (locate 'my-smac 'symbol-macro)
             'my-smac 'symbol-macro 'symbol-macro-dref)
  (with-failure-expected ((and (alexandria:featurep '(:not :sbcl))
                               'failure))
    (with-test ("How to detect symbol macros?")
      (signals (locate-error :pred "does not name")
        (locate 'foo 'symbol-macro))))
  (signals (locate-error)
    (locate "xxx" 'symbol-macro))
  (signals (locate-error :pred "Bad arguments")
    (locate 'smac '(symbol-macro 7))))

(deftest test-locate/compiler-macro ()
  (check-ref (locate 'foo 'compiler-macro)
             'foo 'compiler-macro 'compiler-macro-dref)
  (with-failure-expected ((and (alexandria:featurep '(:not :sbcl))
                               'failure))
    (with-test ("How to detect compiler macro functions?")
      (signals-not (locate-error)
        (check-ref (locate (compiler-macro-function 'foo))
                   'foo 'compiler-macro 'compiler-macro-dref))))
  (signals (locate-error :pred "does not name")
    (locate 'xxx 'compiler-macro))
  (signals (locate-error)
    (locate "xxx" 'compiler-macro))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo '(compiler-macro 7))))

(deftest test-locate/setf ()
  (signals (locate-error :pred "does not have a SETF expansion")
    (locate 'foo 'setf))
  (signals (locate-error)
    (locate "xxx" 'setf))
  (signals (locate-error :pred "Bad arguments")
    (locate 'has-setf-expander '(setf 7 8)))
  (signals (locate-error :pred "Only the METHOD locative")
    (locate 'has-setf-expander '(setf 7)))
  (test-locate/setf/expander)
  (test-locate/setf/function)
  (test-locate/setf/generic-function)
  (test-locate/setf/method))

(deftest test-locate/setf/expander ()
  (check-ref (locate 'has-setf-expander 'setf)
             'has-setf-expander 'setf 'setf-dref)
  (is (null (resolve (make-xref 'has-setf-expander 'setf) nil))))

(deftest test-locate/setf/function ()
  (check-ref (locate 'has-setf-function 'setf)
             'has-setf-function 'setf 'setf-dref)
  (check-ref (locate #'(setf has-setf-function))
             'has-setf-function 'setf 'setf-dref)
  (is (eq (resolve (make-xref 'has-setf-function 'setf) nil)
          #'(setf has-setf-function))))

(deftest test-locate/setf/generic-function ()
  (check-ref (locate 'has-setf-generic-function 'setf)
             'has-setf-generic-function 'setf 'setf-dref)
  (check-ref (locate #'(setf has-setf-generic-function))
             'has-setf-generic-function 'setf 'setf-dref)
  (is (eq (resolve (make-xref 'has-setf-generic-function 'setf) nil)
          #'(setf has-setf-generic-function))))

(deftest test-locate/setf/method ()
  (check-ref (locate 'has-setf-generic-function '(setf (method () (string))))
             'has-setf-generic-function '(setf (method () (string)))
             'setf-dref)
  (signals (locate-error :pred "METHOD not found.")
    (locate 'has-setf-generic-function '(setf (method () (undefined)))))
  (is (eq (resolve (make-xref 'has-setf-generic-function
                              '(setf (method () (string)))))
          (dref::find-method* '(setf has-setf-generic-function) () '(string)))))

(deftest test-locate/function ()
  (check-ref (locate 'foo 'function) 'foo 'function 'function-dref)
  (check-ref (locate #'foo) 'foo 'function 'function-dref)
  (signals (locate-error :pred "not a symbol naming a function")
    (locate 'undefined 'function))
  (signals (locate-error :pred "BAR names a macro")
    (locate 'bar 'function))
  (signals (locate-error)
    (locate "xxx" 'function))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo '(function 7)))
  (is (eq (resolve (locate 'foo 'function)) #'foo))
  (with-test ("traced")
    (check-ref (locate 'traced-foo 'function)
               'traced-foo 'function 'function-dref)
    (with-failure-expected ((and (alexandria:featurep '(:or :abcl :clisp))
                                 'failure))
      (check-ref (locate #'traced-foo nil nil)
                 'traced-foo 'function 'function-dref))))

(deftest test-locate/generic-function ()
  (check-ref (locate 'test-gf 'generic-function)
             'test-gf 'generic-function 'generic-function-dref)
  (check-ref (locate #'test-gf) 'test-gf 'generic-function
             'generic-function-dref)
  (with-test ("actualize function to generic-function")
    (check-ref (locate 'test-gf 'function)
               'test-gf 'generic-function 'generic-function-dref))
  (signals (locate-error :pred "not a symbol naming a generic function")
    (locate 'undefined 'generic-function))
  (signals (locate-error :pred "not a symbol naming a generic function")
    (locate 'bar 'generic-function))
  (signals (locate-error :pred "not a symbol naming a generic function")
    (locate "xxx" 'generic-function))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo '(generic-function 7)))
  (is (eq (resolve (locate 'test-gf 'generic-function)) #'test-gf))
  (with-test ("traced")
    (check-ref (locate 'traced-gf 'function)
               'traced-gf 'generic-function 'generic-function-dref)
    (with-failure-expected ((and (alexandria:featurep '(:or :abcl :clisp))
                                 'failure))
      (check-ref (locate #'traced-gf nil nil)
                 'traced-gf 'generic-function 'generic-function-dref))))

(deftest test-locate/method ()
  (check-ref (locate 'test-gf '(method () (number)))
             'test-gf '(method () (number)) 'method-dref)
  (check-ref (locate (dref::find-method* 'test-gf () '(number)))
             'test-gf '(method () (number)) 'method-dref)
  (signals (locate-error :pred "Method does not exist")
    (locate 'undefined '(method () (number))))
  (signals (locate-error :pred "Method does not exist")
    (locate 'test-gf '(method () (undefined))))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo 'method))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo '(method ())))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo '(method ())))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo '(method () () ())))
  (signals (locate-error :pred "Method does not exist")
    (locate 'foo '(method 7 8)))
  (is (eq (resolve (locate 'test-gf '(method () (number))))
          (dref::find-method* 'test-gf () '(number)))))

(deftest test-locate/method-combination ()
  (check-ref (locate 'my-comb 'method-combination)
             'my-comb 'method-combination 'method-combination-dref)
  (with-failure-expected ((and (alexandria:featurep '(:not :sbcl))
                               'failure))
    (with-test ("How to detect method combinations?")
      (signals (locate-error)
        (locate 'undefined 'method-combination))))
  (signals (locate-error)
    (locate "xxx" 'method-combination)))

(deftest test-locate/accessor ()
  (check-ref (locate 'foo-a '(accessor foo))
             'foo-a '(accessor foo) 'accessor-dref)
  (with-test ("recognize writer method object as part of accessor")
    (check-ref (locate (dref::find-method* '(setf foo-a) () '(t foo)))
               'foo-a '(accessor foo) 'accessor-dref))
  (with-test ("recognize reader method object as part of accessor")
    (check-ref (locate (dref::find-method* 'foo-a () '(foo)))
               'foo-a '(accessor foo) 'accessor-dref))
  (with-test ("actualize reader method to accessor")
    (check-ref (locate 'foo-a '(reader foo))
               'foo-a '(accessor foo) 'accessor-dref))
  (with-test ("recognize the writer method of an accessor")
    (check-ref (locate 'foo-a '(writer foo))
               'foo-a '(accessor foo) 'accessor-dref))
  (signals (locate-error)
    (locate 'foo-r '(accessor foo)))
  (signals (locate-error)
    (locate 'foo-w '(accessor foo)))
  (signals (locate-error)
    (locate 'foo-a '(accessor t)))
  (signals (locate-error)
    (locate "xxx" '(accessor foo)))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo-a 'accessor))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo-a '(accessor 1 2)))
  (with-test ("an accessor dref resolves to its writer method")
    (is (eq (resolve (make-xref 'foo-a '(accessor foo)))
            (dref::find-method* '(setf foo-a) () '(t foo))))))

(deftest test-locate/reader ()
  (check-ref (locate 'foo-r '(reader foo))
             'foo-r '(reader foo) 'reader-dref)
  (check-ref (locate (dref::find-method* 'foo-r () '(foo)))
             'foo-r '(reader foo) 'reader-dref)
  (signals (locate-error)
    (locate 'foo-w '(reader foo)))
  (signals (locate-error)
    (locate 'foo-r '(reader t)))
  (signals (locate-error)
    (locate "xxx" '(reader foo)))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo-r 'reader))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo-r '(reader 1 2)))
  (is (eq (resolve (make-xref 'foo-r '(reader foo)))
          (dref::find-method* 'foo-r () '(foo)))))

(deftest test-locate/writer ()
  (check-ref (locate 'foo-w '(writer foo))
             'foo-w '(writer foo) 'writer-dref)
  (check-ref (locate (dref::find-method* 'foo-w () '(t foo)))
             'foo-w '(writer foo) 'writer-dref)
  (signals (locate-error)
    (locate 'foo-r '(writer foo)))
  (signals (locate-error)
    (locate 'foo-w '(writer t)))
  (signals (locate-error)
    (locate "xxx" '(writer foo)))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo-w 'writer))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo-w '(writer 1 2)))
  (is (eq (resolve (make-xref 'foo-w '(writer foo)))
          (dref::find-method* 'foo-w () '(t foo)))))

(deftest test-locate/structure-accessor ()
  (check-ref (locate 'baz-aaa 'structure-accessor)
             'baz-aaa 'structure-accessor 'structure-accessor-dref)
  (with-test ("How to detect structure accessors?")
    (with-failure-expected ((and (alexandria:featurep
                                  '(:or :abcl :allegro :cmucl :ecl))
                                 'failure))
      (signals-not (locate-error)
        (with-failure-expected ('failure)
          (check-ref (locate #'baz-aaa)
                     'baz-aaa 'structure-accessor 'structure-accessor-dref)))))
  (check-ref (locate 'baz-aaa '(structure-accessor baz))
             'baz-aaa 'structure-accessor 'structure-accessor-dref)
  (check-ref (locate 'baz-aaa '(structure-accessor xxx))
             'baz-aaa 'structure-accessor 'structure-accessor-dref)
  (check-ref (dref-origin (locate 'baz-aaa '(structure-accessor baz)))
             'baz-aaa '(structure-accessor baz) 'xref)
  (signals (locate-error)
    (locate 'undefined 'structure-accessor))
  (signals (locate-error)
    (locate "xxx" 'structure-accessor))
  (signals-not (locate-error)
    (locate 'baz-aaa '(structure-accessor 1)))
  (signals (locate-error :pred "Bad arguments")
    (locate 'baz-aaa '(structure-accessor 1 2)))
  (is (eq (resolve (make-xref 'baz-aaa 'structure-accessor)) #'baz-aaa)))

(deftest test-locate/type ()
  (check-ref (locate 'bar 'type)
             'bar 'type 'type-dref)
  (check-ref (locate 'foo 'type)
             'foo 'class 'class-dref)
  (check-ref (locate 'my-error 'type)
             'my-error 'condition 'condition-dref)
  (with-failure-expected ((and (alexandria:featurep '(:not :ccl))
                               'failure))
    (with-test ("How to detect types?")
      (signals (locate-error)
        (locate 'undefined 'type))))
  (signals (locate-error)
    (locate "xxx" 'type))
  (signals (locate-error :pred "Bad arguments")
    (locate 'bar '(type 1))))

(deftest test-locate/class ()
  (check-ref (locate 'foo 'class)
             'foo 'class 'class-dref)
  (check-ref (locate (find-class 'foo))
             'foo 'class 'class-dref)
  (check-ref (locate 'my-error 'class)
             'my-error 'condition 'condition-dref)
  (signals (locate-error)
    (locate 'undefined 'class))
  (signals (locate-error)
    (locate "xxx" 'class))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo '(class 1)))
  (is (eq (resolve (make-xref 'foo 'class)) (find-class 'foo))))

(deftest test-locate/condition ()
  (check-ref (locate 'my-error 'condition)
             'my-error 'condition 'condition-dref)
  (check-ref (locate (find-class 'my-error))
             'my-error 'condition 'condition-dref)
  (check-ref (locate 'my-error 'class)
             'my-error 'condition 'condition-dref)
  (signals (locate-error)
    (locate 'undefined 'class))
  (signals (locate-error)
    (locate "xxx" 'class))
  (signals (locate-error :pred "Bad arguments")
    (locate 'foo '(class 1)))
  (is (eq (resolve (make-xref 'my-error 'condition))
          (find-class 'my-error))))

(deftest test-locate/declaration ()
  (check-ref (locate 'test-declaration 'declaration)
             'test-declaration 'declaration 'declaration-dref)
  (with-failure-expected ((and (alexandria:featurep '(:not :sbcl))
                               'failure))
    (signals (locate-error)
      (locate 'undefined 'declaration)))
  (signals (locate-error)
    (locate "xxx" 'declaration))
  (signals (locate-error :pred "Bad arguments")
    (locate 'test-declaration '(declaration 1))))

(deftest test-locate/restart ()
  (check-ref (locate 'some-restart 'restart)
             'some-restart 'restart 'restart-dref)
  (signals (locate-error)
    (locate 'undefined 'restart))
  (signals (locate-error)
    (locate "xxx" 'restart))
  (signals (locate-error :pred "Bad arguments")
    (locate 'some-restart '(restart 1))))

(deftest test-locate/asdf-system ()
  (check-ref (locate "dref" 'asdf:system)
             "dref" 'asdf:system 'asdf-system-dref)
  (check-ref (locate "DREF" 'asdf:system)
             "dref" 'asdf:system 'asdf-system-dref)
  (check-ref (locate '#:dref 'asdf:system)
             "dref" 'asdf:system 'asdf-system-dref)
  (check-ref (locate '#:dref 'asdf:system)
             "dref" 'asdf:system 'asdf-system-dref)
  (check-ref (locate (asdf:find-system "dref"))
             "dref" 'asdf:system 'asdf-system-dref)
  (signals (locate-error)
    (locate 'undefined 'asdf:system))
  (signals (locate-error :pred "Bad arguments")
    (locate "dref" '(asdf:system 1)))
  (is (eq (resolve (make-xref "dref" 'asdf:system))
          (asdf:find-system "dref"))))

(deftest test-locate/package ()
  (check-ref (locate '#:dref 'package)
             (symbol-name '#:dref) 'package 'package-dref)
  (check-ref (locate (find-package '#:dref))
             (symbol-name '#:dref) 'package 'package-dref)
  (signals (locate-error)
    (locate "dREf" 'package))
  (signals (locate-error :pred "Bad arguments")
    (locate '#:dref '(package 1)))
  (is (eq (resolve (make-xref '#:dref 'package))
          (find-package '#:dref))))

(deftest test-locate/readtable ()
  (check-ref (locate 'xxx-rt 'readtable)
             'xxx-rt 'readtable 'readtable-dref)
  (check-ref (locate (named-readtables:find-readtable 'xxx-rt))
             'xxx-rt 'readtable 'readtable-dref)
  (check-ref (locate nil 'readtable)
             :common-lisp 'readtable 'readtable-dref)
  (signals (locate-error)
    (locate 'undefined 'readtable))
  (signals (locate-error)
    (locate "xxx" 'readtable))
  (signals (locate-error :pred "Bad arguments")
    (locate 'xxx-rt '(readtable 1)))
  (is (eq (resolve (make-xref 'xxx-rt 'readtable))
          (named-readtables:find-readtable 'xxx-rt))))

(deftest test-locate/locative ()
  (check-ref (locate 'my-loc 'locative)
             'my-loc 'locative 'locative-dref)
  (signals (locate-error)
    (locate 'undefined 'locative))
  (signals (locate-error)
    (locate "xxx" 'locative))
  (signals (locate-error :pred "Bad arguments")
    (locate 'my-loc '(locative 1))))

(deftest test-locate/unknown ()
  (signals (locate-error)
    (locate 'undefined '(unknown and more)))
  (dolist (dref (definitions 'print :locative-types '(unknown)))
    (is (xref= (locate 'print (dref-locative dref)) dref))))

(deftest test-locate/lambda ()
  (check-ref (locate nil '(lambda :file "xxx"))
             nil '(lambda :file "xxx") 'lambda-dref)
  (signals (locate-error)
    (locate 'xxx 'lambda))
  (let ((dref (locate nil '(lambda :arglist (x y z)
                            :docstring "doc"
                            :file "xxx"
                            :file-position 7
                            :snippet "snip"))))
    (is (equal (arglist dref) '(x y z)))
    (is (equal (docstring dref) "doc"))
    (is (equal (source-location-file (source-location dref)) "xxx"))
    (is (equal (source-location-file-position (source-location dref)) 7))
    (is (equal (source-location-snippet (source-location dref)) "snip"))))

(deftest test-locate/alias ()
  (check-ref (locate 'foo 'object)
             'foo 'class 'class-dref)
  (check-ref (locate '*some-var* '(var 7))
             '*some-var* 'variable 'variable-dref)
  (check-ref (dref-origin (locate '*some-var* '(var 7)))
             '*some-var* '(var 7) 'xref))
