(in-package :mgl-pax)

(defparameter *hyperpsec-entries*
  '(;;&allow-other-keys 03_da
    ;;&aux 03_da
    ;;&body 03_dd
    ;;&environment 03_dd
    ;;&key 03_da
    ;;&optional 03_da
    ;;&rest 03_da
    ;;&whole 03_dd
    (* function "f_st")
    (* variable "v_stst")
    (** variable "v__stst")
    (*** variable "v__stst")
    (*break-on-signals* variable "v_break_")
    (*compile-file-pathname* variable "v_cmp_fi")
    (*compile-file-truename* variable "v_cmp_fi")
    (*compile-print* variable "v_cmp_pr")
    (*compile-verbose* variable "v_cmp_pr")
    (*debug-io* variable "v_debug_")
    (*debugger-hook* variable "v_debugg")
    (*default-pathname-defaults* variable "v_defaul")
    (*error-output* variable "v_debug_")
    (*features* variable "v_featur")
    (*gensym-counter* variable "v_gensym")
    (*load-pathname* variable "v_ld_pns")
    (*load-print* variable "v_ld_prs")
    (*load-truename* variable "v_ld_pns")
    (*load-verbose* variable "v_ld_prs")
    (*macroexpand-hook* variable "v_mexp_h")
    (*modules* variable "v_module")
    (*package* variable "v_pkg")
    (*print-array* variable "v_pr_ar")
    (*print-base* variable "v_pr_bas")
    (*print-case* variable "v_pr_cas")
    (*print-circle* variable "v_pr_cir")
    (*print-escape* variable "v_pr_esc")
    (*print-gensym* variable "v_pr_gen")
    (*print-length* variable "v_pr_lev")
    (*print-level* variable "v_pr_lev")
    (*print-lines* variable "v_pr_lin")
    (*print-miser-width* variable "v_pr_mis")
    (*print-pprint-dispatch* variable "v_pr_ppr")
    (*print-pretty* variable "v_pr_pre")
    (*print-radix* variable "v_pr_bas")
    (*print-readably* variable "v_pr_rda")
    (*print-right-margin* variable "v_pr_rig")
    (*query-io* variable "v_debug_")
    (*random-state* variable "v_rnd_st")
    (*read-base* variable "v_rd_bas")
    (*read-default-float-format* variable "v_rd_def")
    (*read-eval* variable "v_rd_eva")
    (*read-suppress* variable "v_rd_sup")
    (*readtable* variable "v_rdtabl")
    (*standard-input* variable "v_debug_")
    (*standard-output* variable "v_debug_")
    (*terminal-io* variable "v_termin")
    (*trace-output* variable "v_debug_")
    (+ function "f_pl")
    (+ variable "v_pl_plp")
    (++ variable "v_pl_plp")
    (+++ variable "v_pl_plp")
    (- function "f__")
    (- variable "v__")
    (/ function "f_sl")
    (/ variable "v_sl_sls")
    (// variable "v_sl_sls")
    (/// variable "v_sl_sls")
    (/= function f_eq_sle)
    (1+ function "f_1pl_1_")
    (1- function "f_1pl_1_")
    (< function "f_eq_sle")
    (<= function "f_eq_sle")
    (= function "f_eq_sle")
    (> function "f_eq_sle")
    (>= function "f_eq_sle")
    (abort function "f_abortc")
    (abort restart "r_abort")
    (abs function "f_abs")
    (acons function "f_acons")
    (acos function "f_asin_")
    (acosh function "f_sinh_")
    (add-method function "f_add_me")
    (adjoin function "f_adjoin")
    (adjust-array function "f_adjust")
    (adjustable-array-p function "f_adju_1")
    (allocate-instance function "f_alloca")
    (alpha-char-p function "f_alpha_")
    (alphanumericp function "f_alphan")
    (and macro "m_and")
    (and type "t_and")
    (append function "f_append")
    (apply function "f_apply")
    (apropos function "f_apropo")
    (apropos-list function "f_apropo")
    (aref function "f_aref")
    (arithmetic-error condition "e_arithm")
    (arithmetic-error-operands function "f_arithm")
    (arithmetic-error-operation function "f_arithm")
    (array type "t_array")
    (array-dimension function "f_ar_dim")
    (array-dimension-limit constant "v_ar_dim")
    (array-dimensions function "f_ar_d_1")
    (array-displacement function "f_ar_dis")
    (array-element-type function "f_ar_ele")
    (array-has-fill-pointer-p function "f_ar_has")
    (array-in-bounds-p function "f_ar_in_")
    (array-rank function "f_ar_ran")
    (array-rank-limit constant "v_ar_ran")
    (array-row-major-index function "f_ar_row")
    (array-total-size function "f_ar_tot")
    (array-total-size-limit constant "v_ar_tot")
    (arrayp function "f_arrayp")
    (ash function "f_ash")
    (asin function "f_asin_")
    (asinh function "f_sinh_")
    (assert macro "m_assert")
    (assoc function "f_assocc")
    (assoc-if function "f_assocc")
    (assoc-if-not function "f_assocc")
    (atan function "f_asin_")
    (atanh function "f_sinh_")
    (atom function "f_atom")
    (atom type "t_atom")
    ;; (atom glossary-entry "26_glo_a#atom")
    (base-char type "t_base_c")
    (base-string type "t_base_s")
    (bignum type "t_bignum")
    (bit function "f_bt_sb")
    (bit type "t_bit")
    ;; (bit glossary-entry "26_glo_b#bit")
    (bit-and function "f_bt_and")
    (bit-andc1 function "f_bt_and")
    (bit-andc2 function "f_bt_and")
    (bit-eqv function "f_bt_and")
    (bit-ior function "f_bt_and")
    (bit-nand function "f_bt_and")
    (bit-nor function "f_bt_and")
    (bit-not function "f_bt_and")
    (bit-orc1 function "f_bt_and")
    (bit-orc2 function "f_bt_and")
    (bit-vector type "t_bt_vec")
    (bit-vector-p function "f_bt_vec")
    (bit-xor function "f_bt_and")
    (block operator "s_block")
    (boole function "f_boole")
    (boole-1 constant "v_b_1_b")
    (boole-2 constant "v_b_1_b")
    (boole-and constant "v_b_1_b")
    (boole-andc1 constant "v_b_1_b")
    (boole-andc2 constant "v_b_1_b")
    (boole-c1 constant "v_b_1_b")
    (boole-c2 constant "v_b_1_b")
    (boole-clr constant "v_b_1_b")
    (boole-eqv constant "v_b_1_b")
    (boole-ior constant "v_b_1_b")
    (boole-nand constant "v_b_1_b")
    (boole-nor constant "v_b_1_b")
    (boole-orc1 constant "v_b_1_b")
    (boole-orc2 constant "v_b_1_b")
    (boole-set constant "v_b_1_b")
    (boole-xor constant "v_b_1_b")
    (boolean type "t_ban")
    (both-case-p function "f_upper_")
    (boundp function "f_boundp")
    (break function "f_break")
    (broadcast-stream type "t_broadc")
    (broadcast-stream-streams function "f_broadc")
    (built-in-class type "t_built_")
    (butlast function "f_butlas")
    (byte function "f_by_by")
    (byte-position function "f_by_by")
    (byte-size function "f_by_by")
    (caaaar function "f_car_c")
    (caaadr function "f_car_c")
    (caaar function "f_car_c")
    (caadar function "f_car_c")
    (caaddr function "f_car_c")
    (caadr function "f_car_c")
    (caar function "f_car_c")
    (cadaar function "f_car_c")
    (cadadr function "f_car_c")
    (cadar function "f_car_c")
    (caddar function "f_car_c")
    (cadddr function "f_car_c")
    (caddr function "f_car_c")
    (cadr function "f_car_c")
    (call-arguments-limit constant "v_call_a")
    (call-method macro "m_call_m")
    ;; This is a local function.
    (call-next-method function "f_call_n")
    (car function "f_car_c")
    (case macro "m_case_")
    (catch operator "s_catch")
    (ccase macro "m_case_")
    (cdaaar function "f_car_c")
    (cdaadr function "f_car_c")
    (cdaar function "f_car_c")
    (cdadar function "f_car_c")
    (cdaddr function "f_car_c")
    (cdadr function "f_car_c")
    (cdar function "f_car_c")
    (cddaar function "f_car_c")
    (cddadr function "f_car_c")
    (cddar function "f_car_c")
    (cdddar function "f_car_c")
    (cddddr function "f_car_c")
    (cdddr function "f_car_c")
    (cddr function "f_car_c")
    (cdr function "f_car_c")
    (ceiling function "f_floorc")
    (cell-error condition "e_cell_e")
    (cell-error-name function "f_cell_e")
    (cerror function "f_cerror")
    (change-class function "f_chg_cl")
    (char function "f_char_")
    (char-code function "f_char_c")
    (char-code-limit constant "v_char_c")
    (char-downcase function "f_char_u")
    (char-equal function "f_chareq")
    (char-greaterp function "f_chareq")
    (char-int function "f_char_i")
    (char-lessp function "f_chareq")
    (char-name function "f_char_n")
    (char-not-equal function "f_chareq")
    (char-not-greaterp function "f_chareq")
    (char-not-lessp function "f_chareq")
    (char-upcase function "f_char_u")
    (char/= function "f_chareq")
    (char< function "f_chareq")
    (char<= function "f_chareq")
    (char= function "f_chareq")
    (char> function "f_chareq")
    (char>= function "f_chareq")
    (character function "f_ch")
    (character class "t_ch")
    ;;(character glossary-entry "character")
    (characterp function "f_chp")
    (check-type macro "m_check_")
    (cis function "f_cis")
    (class class "t_class")
    (class-name function "f_class_")
    (class-of function "f_clas_1")
    (clear-input function "f_clear_")
    (clear-output function "f_finish")
    (close function "f_close")
    (clrhash function "f_clrhas")
    (code-char function "f_code_c")
    (coerce function "f_coerce")
    (compilation-speed declaration "d_optimi")
    (compile function "f_cmp")
    (compile-file function "f_cmp_fi")
    (compile-file-pathname function "f_cmp__1")
    (compiled-function type "t_cmpd_f")
    (compiled-function-p function "f_cmpd_f")
    ;;(compiler-macro symbol "f_docume")
    (compiler-macro-function function "f_cmp_ma")
    (complement function "f_comple")
    (complex function "f_comp_2")
    (complex class "t_comple")
    ;;(complex glossary-entry "26_glo_c#complex")
    (complexp function "f_comp_3")
    (compute-applicable-methods function "f_comput")
    (compute-restarts function "f_comp_1")
    (concatenate function "f_concat")
    (concatenated-stream type "t_concat")
    (concatenated-stream-streams function "f_conc_1")
    (cond macro "m_cond")
    (condition condition "e_cnd")
    (conjugate function "f_conjug")
    (cons function "f_cons")
    (cons type "t_cons")
    ;;(cons glossary-entry "26_glo_c#cons")
    (consp function "f_consp")
    (constantly function "f_cons_1")
    (constantp function "f_consta")
    (continue function "f_abortc")
    (continue restart "r_contin")
    (control-error condition "e_contro")
    (copy-alist function "f_cp_ali")
    (copy-list function "f_cp_lis")
    (copy-pprint-dispatch function "f_cp_ppr")
    (copy-readtable function "f_cp_rdt")
    (copy-seq function "f_cp_seq")
    (copy-structure function "f_cp_stu")
    (copy-symbol function "f_cp_sym")
    (copy-tree function "f_cp_tre")
    (cos function "f_sin_c")
    (cosh function "f_sinh_")
    (count function "f_countc")
    (count-if function "f_countc")
    (count-if-not function "f_countc")
    (ctypecase macro "m_tpcase")
    (debug declaration "d_optimi")
    (decf function "m_incf_")
    (declaim macro "m_declai")
    (declaration declaration "d_declar")
    (declare operator "s_declar")
    (decode-float function "f_dec_fl")
    (decode-universal-time function "f_dec_un")
    (defclass macro "m_defcla")
    (defconstant macro "m_defcon")
    (defgeneric macro "m_defgen")
    (define-compiler-macro macro "m_define")
    (define-condition macro "m_defi_5")
    (define-method-combination macro "m_defi_4")
    (define-modify-macro macro "m_defi_2")
    (define-setf-expander macro "m_defi_3")
    (define-symbol-macro macro "m_defi_1")
    (defmacro macro "m_defmac")
    (defmethod macro "m_defmet")
    (defpackage macro "m_defpkg")
    (defparameter macro "m_defpar")
    (defsetf macro "m_defset")
    (defstruct macro "m_defstr")
    (deftype macro "m_deftp")
    (defun macro "m_defun")
    (defvar macro "m_defpar")
    (delete function "f_rm_rm")
    (delete-duplicates function "f_rm_dup")
    (delete-file function "f_del_fi")
    (delete-if function "f_rm_rm")
    (delete-if-not function "f_rm_rm")
    (delete-package function "f_del_pk")
    (denominator function "f_numera")
    (deposit-field function "f_deposi")
    (describe function "f_descri")
    (describe-object function "f_desc_1")
    (destructuring-bind macro "m_destru")
    (digit-char function "f_digit_")
    (digit-char-p function "f_digi_1")
    (directory function "f_dir")
    (directory-namestring function "f_namest")
    (disassemble function "f_disass")
    (division-by-zero condition "e_divisi")
    (do macro "m_do_do")
    (do* macro "m_do_do")
    (do-all-symbols macro "m_do_sym")
    (do-external-symbols macro "m_do_sym")
    (do-symbols macro "m_do_sym")
    (documentation generic-function "f_docume")
    (dolist macro "m_dolist")
    (dotimes macro "m_dotime")
    (double-float type "t_short_")
    (double-float-epsilon constant "v_short_")
    (double-float-negative-epsilon constant "v_short_")
    (dpb function "f_dpb")
    (dribble function "f_dribbl")
    (dynamic-extent declaration "d_dynami")
    (ecase macro "m_case_")
    (echo-stream type "t_echo_s")
    (echo-stream-input-stream function "f_echo_s")
    (echo-stream-output-stream function "f_echo_s")
    (ed function "f_ed")
    (eighth function "f_firstc")
    (elt function "f_elt")
    (encode-universal-time function "f_encode")
    (end-of-file condition "e_end_of")
    (endp function "f_endp")
    (enough-namestring function "f_namest")
    (ensure-directories-exist function "f_ensu_1")
    (ensure-generic-function function "f_ensure")
    (eq function "f_eq")
    (eql function "f_eql")
    (eql type "t_eql")
    (equal function "f_equal")
    (equalp function "f_equalp")
    (error condition "e_error")
    (error function "f_error")
    ;;(error glossary-entry "26_glo_e#error")
    (etypecase macro "m_tpcase")
    (eval function "f_eval")
    (eval-when operator "s_eval_w")
    (evenp function "f_evenpc")
    (every function "f_everyc")
    (exp function "f_exp_e")
    (export function "f_export")
    (expt function "f_exp_e")
    (extended-char type "t_extend")
    (fboundp function "f_fbound")
    (fceiling function "f_floorc")
    (fdefinition function "f_fdefin")
    (ffloor function "f_floorc")
    (fifth function "f_firstc")
    (file-author function "f_file_a")
    (file-error condition "e_file_e")
    (file-error-pathname function "f_file_e")
    (file-length function "f_file_l")
    (file-namestring function "f_namest")
    (file-position function "f_file_p")
    (file-stream type "t_file_s")
    (file-string-length function "f_file_s")
    (file-write-date function "f_file_w")
    (fill function "f_fill")
    (fill-pointer function "f_fill_p")
    (find function "f_find_")
    (find-all-symbols function "f_find_a")
    (find-class function "f_find_c")
    (find-if function "f_find_")
    (find-if-not function "f_find_")
    (find-method generic-function "f_find_m")
    (find-package function "f_find_p")
    (find-restart function "f_find_r")
    (find-symbol function "f_find_s")
    (finish-output function "f_finish")
    (first function "f_firstc")
    (fixnum type "t_fixnum")
    (flet operator "s_flet_")
    (float function "f_float")
    (float type "t_float")
    ;;(float glossary-entry "26_glo_f@float")
    (float-digits function "f_dec_fl")
    (float-precision function "f_dec_fl")
    (float-radix function "f_dec_fl")
    (float-sign function "f_dec_fl")
    (floating-point-inexact condition "e_floa_1")
    (floating-point-invalid-operation condition "e_floati")
    (floating-point-overflow condition "e_floa_2")
    (floating-point-underflow condition "e_floa_3")
    (floatp function "f_floatp")
    (floor function "f_floorc")
    (fmakunbound function "f_fmakun")
    (force-output function "f_finish")
    (format function "f_format")
    (formatter macro "m_format")
    (fourth function "f_firstc")
    (fresh-line function "f_terpri")
    (fround function "f_floorc")
    (ftruncate function "f_floorc")
    (ftype declaration "d_ftype")
    (funcall function "f_funcal")
    (function operator "s_fn")
    ;;(function symbol "f_document")
    (function type "t_fn")
    ;;(function glossary-entry "26_glo_f#function")
    (function-keywords function "f_fn_kwd")
    (function-lambda-expression function "f_fn_lam")
    (functionp function "f_fnp")
    (gcd function "f_gcd")
    (generic-function type "t_generi")
    (gensym function "f_gensym")
    (gentemp function "f_gentem")
    (get function "f_get")
    (get-decoded-time function "f_get_un")
    (get-dispatch-macro-character function "f_set__1")
    (get-internal-real-time function "f_get_in")
    (get-internal-run-time function "f_get__1")
    (get-macro-character function "f_set_ma")
    (get-output-stream-string function "f_get_ou")
    (get-properties function "f_get_pr")
    (get-setf-expansion function "f_get_se")
    (get-universal-time function "f_get_un")
    (getf function "f_getf")
    (gethash function "f_gethas")
    (go operator "s_go")
    (graphic-char-p function "f_graphi")
    (handler-bind macro "m_handle")
    (handler-case macro "m_hand_1")
    (hash-table type "t_hash_t")
    (hash-table-count function "f_hash_1")
    (hash-table-p function "f_hash_t")
    (hash-table-rehash-size function "f_hash_2")
    (hash-table-rehash-threshold function "f_hash_3")
    (hash-table-size function "f_hash_4")
    (hash-table-test function "f_hash_5")
    (host-namestring function "f_namest")
    (identity function "f_identi")
    (if operator "s_if")
    (ignorable declaration "d_ignore")
    (ignore declaration "d_ignore")
    (ignore-errors macro "m_ignore")
    (imagpart function "f_realpa")
    (import function "f_import")
    (in-package macro "m_in_pkg")
    (incf function "m_incf_")
    (initialize-instance function "f_init_i")
    (inline declaration "d_inline")
    (input-stream-p function "f_in_stm")
    (inspect function "f_inspec")
    (integer type "t_intege")
    (integer-decode-float function "f_dec_fl")
    (integer-length function "f_intege")
    (integerp function "f_inte_1")
    (interactive-stream-p function "f_intera")
    (intern function "f_intern")
    (internal-time-units-per-second constant "v_intern")
    (intersection function "f_isec_")
    (invalid-method-error function "f_invali")
    (invoke-debugger function "f_invoke")
    (invoke-restart function "f_invo_1")
    (invoke-restart-interactively function "f_invo_2")
    (isqrt function "f_sqrt_")
    (keyword type "t_kwd")
    (keywordp function "f_kwdp")
    (labels operator "s_flet_")
    (lambda macro "m_lambda")
    ;;(lambda symbol "s_lambda")
    (lambda-list-keywords constant "v_lambda")
    (lambda-parameters-limit constant "v_lamb_1")
    (last function "f_last")
    (lcm function "f_lcm")
    (ldb function "f_ldb")
    (ldb-test function "f_ldb_te")
    (ldiff function "f_ldiffc")
    (least-negative-double-float constant "v_most_1")
    (least-negative-long-float constant "v_most_1")
    (least-negative-normalized-double-float constant "v_most_1")
    (least-negative-normalized-long-float constant "v_most_1")
    (least-negative-normalized-short-float constant "v_most_1")
    (least-negative-normalized-single-float constant "v_most_1")
    (least-negative-short-float constant "v_most_1")
    (least-negative-single-float constant "v_most_1")
    (least-positive-double-float constant "v_most_1")
    (least-positive-long-float constant "v_most_1")
    (least-positive-normalized-double-float constant "v_most_1")
    (least-positive-normalized-long-float constant "v_most_1")
    (least-positive-normalized-short-float constant "v_most_1")
    (least-positive-normalized-single-float constant "v_most_1")
    (least-positive-short-float constant "v_most_1")
    (least-positive-single-float constant "v_most_1")
    (length function "f_length")
    (let operator "s_let_l")
    (let* operator "s_let_l")
    (lisp-implementation-type function "f_lisp_i")
    (lisp-implementation-version function "f_lisp_i")
    (list function "f_list_")
    (list type "t_list")
    ;;(list glossary-entry "26_glo_l#list")
    (list* function "f_list_")
    (list-all-packages function "f_list_a")
    (list-length function "f_list_l")
    (listen function "f_listen")
    (listp function "f_listp")
    (load function "f_load")
    (load-logical-pathname-translations function "f_ld_log")
    (load-time-value operator "s_ld_tim")
    (locally operator "s_locall")
    (log function "f_log")
    (logand function "f_logand")
    (logandc1 function "f_logand")
    (logandc2 function "f_logand")
    (logbitp function "f_logbtp")
    (logcount function "f_logcou")
    (logeqv function "f_logand")
    (logical-pathname function "f_logi_1")
    (logical-pathname type "t_logica")
    (logical-pathname-translations function "f_logica")
    (logior function "f_logand")
    (lognand function "f_logand")
    (lognor function "f_logand")
    (lognot function "f_logand")
    (logorc1 function "f_logand")
    (logorc2 function "f_logand")
    (logtest function "f_logtes")
    (logxor function "f_logand")
    (long-float type "t_short_")
    (long-float-epsilon constant "v_short_")
    (long-float-negative-epsilon constant "v_short_")
    (long-site-name function "f_short_")
    (loop macro "m_loop")
    (loop-finish macro "m_loop_f")
    (lower-case-p function "f_upper_")
    (machine-instance function "f_mach_i")
    (machine-type function "f_mach_t")
    (machine-version function "f_mach_v")
    (macro-function function "f_macro_")
    (macroexpand function "f_mexp_")
    (macroexpand-1 function "f_mexp_")
    (macrolet operator "s_flet_")
    (make-array function "f_mk_ar")
    (make-broadcast-stream function "f_mk_bro")
    (make-concatenated-stream function "f_mk_con")
    (make-condition function "f_mk_cnd")
    (make-dispatch-macro-character function "f_mk_dis")
    (make-echo-stream function "f_mk_ech")
    (make-hash-table function "f_mk_has")
    (make-instance function "f_mk_ins")
    (make-instances-obsolete function "f_mk_i_1")
    (make-list function "f_mk_lis")
    (make-load-form function "f_mk_ld_")
    (make-load-form-saving-slots function "f_mk_l_1")
    (make-method macro "m_call_m")
    (make-package function "f_mk_pkg")
    (make-pathname function "f_mk_pn")
    (make-random-state function "f_mk_rnd")
    (make-sequence function "f_mk_seq")
    (make-string function "f_mk_stg")
    (make-string-input-stream function "f_mk_s_1")
    (make-string-output-stream function "f_mk_s_2")
    (make-symbol function "f_mk_sym")
    (make-synonym-stream function "f_mk_syn")
    (make-two-way-stream function "f_mk_two")
    (makunbound function "f_makunb")
    (map function "f_map")
    (map-into function "f_map_in")
    (mapc function "f_mapc_")
    (mapcan function "f_mapc_")
    (mapcar function "f_mapc_")
    (mapcon function "f_mapc_")
    (maphash function "f_maphas")
    (mapl function "f_mapc_")
    (maplist function "f_mapc_")
    (mask-field function "f_mask_f")
    (max function "f_max_m")
    (member function "t_mem_m")
    (member type "t_member")
    (member-if function "f_mem_m")
    (member-if-not function "f_mem_m")
    (merge function "f_merge")
    (merge-pathnames function "f_merge_")
    (method type "t_method")
    ;;(method-combination symbol "f_docume")
    (method-combination class "t_meth_1")
    (method-combination-error function "f_meth_1")
    (method-qualifiers function "f_method")
    (min function "f_max_m")
    (minusp function "f_minusp")
    (mismatch function "f_mismat")
    (mod function "f_mod_r")
    (mod type "t_mod")
    (most-negative-double-float constant "v_most_1")
    (most-negative-fixnum constant "v_most_p")
    (most-negative-long-float constant "v_most_1")
    (most-negative-short-float constant "v_most_1")
    (most-negative-single-float constant "v_most_1")
    (most-positive-double-float constant "v_most_1")
    (most-positive-fixnum constant "v_most_p")
    (most-positive-long-float constant "v_most_1")
    (most-positive-short-float constant "v_most_1")
    (most-positive-single-float constant "v_most_1")
    (muffle-warning function "f_abortc")
    (muffle-warning restart "r_muffle")
    (multiple-value-bind macro "m_multip")
    (multiple-value-call operator "s_multip")
    (multiple-value-list macro "m_mult_1")
    (multiple-value-prog1 operator "s_mult_1")
    (multiple-value-setq macro "m_mult_2")
    (multiple-values-limit constant "v_multip")
    (name-char function "f_name_c")
    (namestring function "f_namest")
    (nbutlast function "f_butlas")
    (nconc function "f_nconc")
    ;; This is a local function.
    (next-method-p function "f_next_m")
    (nil constant "v_nil")
    (nil type "t_nil")
    ;;(nil glossary-entry "26_glo_n#nil")
    (nintersection function "f_isec_")
    (ninth function "f_firstc")
    (no-applicable-method function "f_no_app")
    (no-next-method function "f_no_nex")
    (not function "f_not")
    (not type "t_not")
    (notany function "f_everyc")
    (notevery function "f_everyc")
    (notinline declaration "d_inline")
    (nreconc function "f_revapp")
    (nreverse function "f_revers")
    (nset-difference function "f_set_di")
    (nset-exclusive-or function "f_set_ex")
    (nstring-capitalize function "f_stg_up")
    (nstring-downcase function "f_stg_up")
    (nstring-upcase function "f_stg_up")
    (nsublis function "f_sublis")
    (nsubst function "f_substc")
    (nsubst-if function "f_substc")
    (nsubst-if-not function "f_substc")
    (nsubstitute function "f_sbs_s")
    (nsubstitute-if function "f_sbs_s")
    (nsubstitute-if-not function "f_sbs_s")
    (nth function "f_nth")
    (nth-value macro "m_nth_va")
    (nthcdr function "f_nthcdr")
    (null function "f_null")
    (null type "t_null")
    ;;(null glossary-entry "26_glo_n#null")
    (number type "t_number")
    (numberp function "f_nump")
    (numerator function "f_numera")
    (nunion function "f_unionc")
    (oddp function "f_evenpc")
    (open function "f_open")
    (open-stream-p function "f_open_s")
    (optimize declaration "d_optimi")
    (or macro "m_or")
    (or type "t_or")
    (otherwise macro "m_case_")
    (output-stream-p function "f_in_stm")
    (package type "t_pkg")
    (package-error condition "e_pkg_er")
    (package-error-package function "f_pkg_er")
    (package-name function "f_pkg_na")
    (package-nicknames function "f_pkg_ni")
    (package-shadowing-symbols function "f_pkg_sh")
    (package-use-list function "f_pkg_us")
    (package-used-by-list function "f_pkg__1")
    (packagep function "f_pkgp")
    (pairlis function "f_pairli")
    (parse-error condition "e_parse_")
    (parse-integer function "f_parse_")
    (parse-namestring function "f_pars_1")
    (pathname function "f_pn")
    (pathname type "t_pn")
    ;;(pathname glossary-entry "26_glo_p#pathname")
    (pathname-device function "f_pn_hos")
    (pathname-directory function "f_pn_hos")
    (pathname-host function "f_pn_hos")
    (pathname-match-p function "f_pn_mat")
    (pathname-name function "f_pn_hos")
    (pathname-type function "f_pn_hos")
    (pathname-version function "f_pn_hos")
    (pathnamep function "f_pnp")
    (peek-char function "f_peek_c")
    (phase function "f_phase")
    (pi constant "v_pi")
    (plusp function "f_minusp")
    (pop macro "m_pop")
    (position function "f_pos_p")
    (position-if function "f_pos_p")
    (position-if-not function "f_pos_p")
    (pprint function "f_wr_pr")
    (pprint-dispatch function "f_ppr_di")
    (pprint-exit-if-list-exhausted macro "m_ppr_ex")
    (pprint-fill function "f_ppr_fi")
    (pprint-indent function "f_ppr_in")
    (pprint-linear function "f_ppr_fi")
    (pprint-logical-block macro "m_ppr_lo")
    (pprint-newline function "f_ppr_nl")
    (pprint-pop macro "m_ppr_po")
    (pprint-tab function "f_ppr_ta")
    (pprint-tabular function "f_ppr_fi")
    (prin1 function "f_wr_pr")
    (prin1-to-string function "f_wr_to_")
    (princ function "f_wr_pr")
    (princ-to-string function "f_wr_to_")
    (print function "f_wr_pr")
    (print-not-readable condition "e_pr_not")
    (print-not-readable-object function "f_pr_not")
    (print-object generic-function "f_pr_obj")
    (print-unreadable-object macro "m_pr_unr")
    (probe-file function "f_probe_")
    (proclaim function "f_procla")
    (prog macro "m_prog_")
    (prog* macro "m_prog_")
    (prog1 macro "m_prog1c")
    (prog2 macro "m_prog1c")
    (progn operator "s_progn")
    (program-error condition "e_progra")
    (progv operator "s_progv")
    (provide function "f_provid")
    (psetf function "m_setf_")
    (psetq macro "m_psetq")
    (push macro "m_push")
    (pushnew macro "m_pshnew")
    (quote operator "s_quote")
    (random function "f_random")
    (random-state type "t_rnd_st")
    (random-state-p function "f_rnd_st")
    (rassoc function "f_rassoc")
    (rassoc-if function "f_rassoc")
    (rassoc-if-not function "f_rassoc")
    (ratio type "t_ratio")
    (rational function "f_ration")
    (rational type "t_ration")
    ;;(rational glossary-entry "26_glo_r#rational")
    (rationalize function "f_ration")
    (rationalp function "f_rati_1")
    (read function "f_rd_rd")
    (read-byte function "f_rd_by")
    (read-char function "f_rd_cha")
    (read-char-no-hang function "f_rd_c_1")
    (read-delimited-list function "f_rd_del")
    (read-from-string function "f_rd_fro")
    (read-line function "f_rd_lin")
    (read-preserving-whitespace function "f_rd_rd")
    (read-sequence function "f_rd_seq")
    (reader-error condition "e_rder_e")
    (readtable type "t_rdtabl")
    (readtable-case function "f_rdtabl")
    (readtablep function "f_rdta_1")
    (real type "t_real")
    (realp function "f_realp")
    (realpart function "f_realpa")
    (reduce function "f_reduce")
    (reinitialize-instance function "f_reinit")
    (rem function "f_mod_r")
    (remf macro "m_remf")
    (remhash function "f_remhas")
    (remove function "f_rm_rm")
    (remove-duplicates function "f_rm_dup")
    (remove-if function "f_rm_rm")
    (remove-if-not function "f_rm_rm")
    (remove-method function "f_rm_met")
    (remprop function "f_rempro")
    (rename-file function "f_rn_fil")
    (rename-package function "f_rn_pkg")
    (replace function "f_replac")
    (require function "f_provid")
    (rest function "f_rest")
    (restart type "t_rst")
    (restart-bind macro "m_rst_bi")
    (restart-case macro "m_rst_ca")
    (restart-name function "f_rst_na")
    (return macro "m_return")
    (return-from operator "s_ret_fr")
    (revappend function "f_revapp")
    (reverse function "f_revers")
    (room function "f_room")
    (rotatef macro "m_rotate")
    (round function "f_floorc")
    (row-major-aref function "f_row_ma")
    (rplaca function "f_rplaca")
    (rplacd function "f_rplaca")
    (safety declaration "d_optimi")
    (satisfies type "t_satisf")
    (sbit function "f_bt_sb")
    (scale-float function "f_dec_fl")
    (schar function "f_char_")
    (search function "f_search")
    (second function "f_firstc")
    (sequence type "t_seq")
    (serious-condition condition "e_seriou")
    (set function "f_set")
    (set-difference function "f_set_di")
    (set-dispatch-macro-character function "f_set__1")
    (set-exclusive-or function "f_set_ex")
    (set-macro-character function "f_set_ma")
    (set-pprint-dispatch function "f_set_pp")
    (set-syntax-from-char function "f_set_sy")
    (setf macro "m_setf")
    ;;(setf symbol "f_docume")
    (setq operator "s_setq")
    (seventh function "f_firstc")
    (shadow function "f_shadow")
    (shadowing-import function "f_shdw_i")
    (shared-initialize function "f_shared")
    (shiftf macro "m_shiftf")
    (short-float type "t_short_")
    (short-float-epsilon constant "v_short_")
    (short-float-negative-epsilon constant "v_short_")
    (short-site-name function "f_short_")
    (signal function "f_signal")
    (signed-byte type "t_sgn_by")
    (signum function "f_signum")
    (simple-array type "t_smp_ar")
    (simple-base-string type "t_smp_ba")
    (simple-bit-vector type "t_smp_bt")
    (simple-bit-vector-p function "f_smp_bt")
    (simple-condition condition "e_smp_cn")
    (simple-condition-format-arguments function "f_smp_cn")
    (simple-condition-format-control function "f_smp_cn")
    (simple-error condition "e_smp_er")
    (simple-string type "t_smp_st")
    (simple-string-p function "f_smp_st")
    (simple-type-error condition "e_smp_tp")
    (simple-vector type "t_smp_ve")
    (simple-vector-p function "f_smp_ve")
    (simple-warning condition "e_smp_wa")
    (sin function "f_sin_c")
    (single-float type "t_short_")
    (single-float-epsilon constant "v_short_")
    (single-float-negative-epsilon constant "v_short_")
    (sinh function "f_sinh_")
    (sixth function "f_firstc")
    (sleep function "f_sleep")
    (slot-boundp function "f_slt_bo")
    (slot-exists-p function "f_slt_ex")
    (slot-makunbound function "f_slt_ma")
    (slot-missing function "f_slt_mi")
    (slot-unbound function "f_slt_un")
    (slot-value function "f_slt_va")
    (software-type function "f_sw_tpc")
    (software-version function "f_sw_tpc")
    (some function "f_everyc")
    (sort function "f_sort_")
    (space declaration "d_optimi")
    (special declaration "d_specia")
    (special-operator-p function "f_specia")
    (speed declaration "d_optimi")
    (sqrt function "f_sqrt_")
    (stable-sort function "f_sort_")
    (standard-char type "t_std_ch")
    (standard-char-p function "f_std_ch")
    (standard-class type "t_std_cl")
    (standard-generic-function type "t_std_ge")
    (standard-method type "t_std_me")
    (standard-object type "t_std_ob")
    (step macro "m_step")
    (storage-condition condition "e_storag")
    (store-value function "f_abortc")
    (store-value restart "r_store")
    (stream type "t_stream")
    (stream-element-type function "f_stm_el")
    (stream-error condition "e_stm_er")
    (stream-error-stream function "f_stm_er")
    (stream-external-format function "f_stm_ex")
    (streamp function "f_stmp")
    (string function "f_string")
    (string type "t_string")
    ;;(string glossary-entry "26_glo_s#string")
    (string-capitalize function "f_stg_up")
    (string-downcase function "f_stg_up")
    (string-equal function "f_stgeq_")
    (string-greaterp function "f_stgeq_")
    (string-left-trim function "f_stg_tr")
    (string-lessp function "f_stgeq_")
    (string-not-equal function "f_stgeq_")
    (string-not-greaterp function "f_stgeq_")
    (string-not-lessp function "f_stgeq_")
    (string-right-trim function "f_stg_tr")
    (string-stream type "t_stg_st")
    (string-trim function "f_stg_tr")
    (string-upcase function "f_stg_up")
    (string/= function "f_stgeq_")
    (string< function "f_stgeq_")
    (string<= function "f_stgeq_")
    (string= function "f_stgeq_")
    (string> function "f_stgeq_")
    (string>= function "f_stgeq_")
    (stringp function "f_stgp")
    ;;(structure symbol "f_docume")
    (structure-class type "t_stu_cl")
    (structure-object type "t_stu_ob")
    (style-warning condition "e_style_")
    (sublis function "f_sublis")
    (subseq function "f_subseq")
    (subsetp function "f_subset")
    (subst function "f_substc")
    (subst-if function "f_substc")
    (subst-if-not function "f_substc")
    (substitute function "f_sbs_s")
    (substitute-if function "f_sbs_s")
    (substitute-if-not function "f_sbs_s")
    (subtypep function "f_subtpp")
    (svref function "f_svref")
    (sxhash function "f_sxhash")
    (symbol type "t_symbol")
    (symbol-function function "f_symb_1")
    (symbol-macrolet operator "s_symbol")
    (symbol-name function "f_symb_2")
    (symbol-package function "f_symb_3")
    (symbol-plist function "f_symb_4")
    (symbol-value function "f_symb_5")
    (symbolp function "f_symbol")
    (synonym-stream type "t_syn_st")
    (synonym-stream-symbol function "f_syn_st")
    (t constant "v_t")
    ;;(t symbol "f_docume")
    (t type "t_t")
    ;;(t glossary-entry "26_glo_t#t")
    (tagbody operator "s_tagbod")
    (tailp function "f_ldiffc")
    (tan function "f_sin_c")
    (tanh function "f_sinh_")
    (tenth function "f_firstc")
    (terpri function "f_terpri")
    (the operator "s_the")
    (third function "f_firstc")
    (throw operator "s_throw")
    (time macro "m_time")
    (trace macro "m_tracec")
    (translate-logical-pathname function "f_tr_log")
    (translate-pathname function "f_tr_pn")
    (tree-equal function "f_tree_e")
    (truename function "f_tn")
    (truncate function "f_floorc")
    (two-way-stream type "t_two_wa")
    (two-way-stream-input-stream function "f_two_wa")
    (two-way-stream-output-stream function "f_two_wa")
    (type declaration "d_type")
    ;;(type symbol "f_docume")
    ;;(type glossary-entry "26_glo_t#type")
    (type-error condition "e_tp_err")
    (type-error-datum function "f_tp_err")
    (type-error-expected-type function "f_tp_err")
    (type-of function "f_tp_of")
    (typecase macro "m_tpcase")
    (typep function "f_typep")
    (unbound-slot condition "e_unboun")
    (unbound-slot-instance function "f_unboun")
    (unbound-variable condition "e_unbo_1")
    (undefined-function condition "e_undefi")
    (unexport function "f_unexpo")
    (unintern function "f_uninte")
    (union function "f_unionc")
    (unless macro "m_when_")
    (unread-char function "f_unrd_c")
    (unsigned-byte type "t_unsgn_")
    (untrace macro "m_tracec")
    (unuse-package function "f_unuse_")
    (unwind-protect operator "s_unwind")
    (update-instance-for-different-class function "f_update")
    (update-instance-for-redefined-class function "f_upda_1")
    (upgraded-array-element-type function "f_upgr_1")
    (upgraded-complex-part-type function "f_upgrad")
    (upper-case-p function "f_upper_")
    (use-package function "f_use_pk")
    (use-value function "f_abortc")
    (use-value restart "r_use_va")
    (user-homedir-pathname function "f_user_h")
    (values function "f_values")
    (values type "t_values")
    (values-list function "f_vals_l")
    ;; (variable symbol "f_docume")
    (vector function "f_vector")
    (vector type "t_vector")
    ;;(vector glossary-entry "26_glo_v#vector")
    (vector-pop function "f_vec_po")
    (vector-push function "f_vec_ps")
    (vector-push-extend function "f_vec_ps")
    (vectorp function "f_vecp")
    (warn function "f_warn")
    (warning condition "e_warnin")
    (when macro "m_when_")
    (wild-pathname-p function "f_wild_p")
    (with-accessors macro "m_w_acce")
    (with-compilation-unit macro "m_w_comp")
    (with-condition-restarts macro "m_w_cnd_")
    (with-hash-table-iterator macro "m_w_hash")
    (with-input-from-string macro "m_w_in_f")
    (with-open-file macro "m_w_open")
    (with-open-stream macro "m_w_op_1")
    (with-output-to-string macro "m_w_out_")
    (with-package-iterator macro "m_w_pkg_")
    (with-simple-restart macro "m_w_smp_")
    (with-slots macro "m_w_slts")
    (with-standard-io-syntax macro "m_w_std_")
    (write function "f_wr_pr")
    (write-byte function "f_wr_by")
    (write-char function "f_wr_cha")
    (write-line function "f_wr_stg")
    (write-sequence function "f_wr_seq")
    (write-string function "f_wr_stg")
    (write-to-string function "f_wr_to_")
    (y-or-n-p function "f_y_or_n")
    (yes-or-no-p function "f_y_or_n")
    (zerop function "f_zerop")))
